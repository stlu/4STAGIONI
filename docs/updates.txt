2016_05_07 Fausto
-Definita costante Player_Name nel Player, la costante è pensata per essere
    overridata con -C quando viene lanciato Player.ol
-Definita operazione registerPlayer nel Market, il market crea l'account e
    notifica il Player con lo stato del suo account
-Modificato behaviour del Player, aggiunte come prime operazioni la registazione
    e il salvataggio del suo status
-Create strutture dati apposite in playerInterface.iol
-Creato questo txt perchè i commit non mi soddisfano = )

2016_05_08 Pardox
- Ho affinato alcune implementazioni inserite da Leggio (production e wasting) 
    per una maggior aderenza alle specifiche.

    "Ad esempio, se prima della produzione c’erano 20 unità di Grano e ne vengono prodotte 2,
    lo Stock di Grano comunicherà al Market il dato 0.1 (corrispondente a 2/20).
    Dato che è aumentata l’offerta del Grano, il Market diminuisce il prezzo totale del Grano del 10%."

    E' esplicitamente indicato che è necessario comunicare al market la quantità deperita o 
    prodotta sottoforma di valore decimale (che provvedo ad arrotondare mediante round@Math).
    Mercoledì scorso avevamo definito la struttura dati StockVariationStruct
    (all'interno di stockInterface.iol) proprio per tal tipo di comunicazione (con la variabile
    variation definita come tipo di dato double).

    All'interno di Market.ol, in corrispondenza delle operazioni di addStock e destroyStock
    ho inserito uno scope di synchronization per ovviare a eventuali scritture simultanee sulla
    struttura dati global.registeredStock.

- Sia in Stock.ol che in Market.ol ho rimodellato alcuni output a video offrendo -spero- una maggior chiarezza.
- Ho iniziato a metter mano a docs/service.odt per effettuare alcuni aggiornamenti; manca ancora
    un po' di lavoro che mi prometto di svolgere al più presto.